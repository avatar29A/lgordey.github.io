{"version":3,"file":"static/webpack/static/development/pages/test-share.js.d0fe9b9c913e2adc60cf.hot-update.js","sources":["webpack:///./pages/test-share.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport withStyles from 'react-jss';\n\nimport { basedGif, basedJpg, basedPng } from '../basedImages';\n\nconst styles = {\n  testWrapper: {\n    width: '100%',\n    maxWidth: 800,\n    margin: '0 auto'\n  },\n  btnWrapper: {\n    padding: '0 20px 20px 0',\n    border: '10px solid black',\n    marginTop: 20,\n    '& button, & a, & span': {\n      margin: '20px 0 0 20px',\n      display: 'inline-block'\n    }\n  }\n};\n\nconst invokeMethods = ['getMe', 'getPhone', 'getContacts', 'enableNotifications', 'disableNotifications'];\n\nfunction Test({ classes }) {\n  const [calledMethods, setCalledMethods] = useState([]);\n  const [receivedData, setReceivedData] = useState([]);\n  const [receivedError, setReceivedError] = useState([]);\n  const [ errors, setErrors ] = useState([]);\n  const [url, setUrl] = useState('loading...');\n  const [aituBridge, setAituBridge] = useState();\n\n  useEffect(() => {\n    setUrl(window.location.href);\n\n    window.AITU_ORIGIN = 'http://localhost:3000';\n    setAituBridge(require('@btsd/aitu-bridge').default);\n    \n  }, []);\n\n  // get a reference to the file input\n  const fileInput = document.querySelector(\"input\");\n\n  // listen for the change event so we can capture the file\n  fileInput.addEventListener(\"change\", (e) => {\n    // get a reference to the file\n    const file = e.target.files[0];\n\n    // encode the file using the FileReader API\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      // use a regex to remove data url part\n      const base64String = reader.result\n        .replace(\"data:\", \"\")\n        .replace(/^.+,/, \"\");\n\n      // log to console\n      // logs wL2dvYWwgbW9yZ...\n      console.log(base64String);\n    };\n    reader.readAsDataURL(file);\n  });\n\n  const handleMethod = async (methodName, params = []) => {\n    if (!invokeMethods.includes(methodName) && !aituBridge.supports(methodName)) {\n      setErrors(prevArray => [...prevArray, `Метод \"${methodName}\" не поддерживается в текущей версии приложения`]);\n      return;\n    }\n    setCalledMethods(prevArray => [...prevArray, methodName])\n\n    console.log(`==handle ${methodName} method${params.length > 0 ? ` with params ${JSON.stringify(params)}`: ''}`);\n    try {\n      const data = await aituBridge[methodName](...params);\n      setReceivedData(prevArray => [...prevArray, JSON.stringify(data)])\n    } catch(e) {\n      console.error(e);\n      const errorText = e instanceof Error ? `${e.name}: ${e.message}` : JSON.stringify(e);\n      setReceivedError(prevArray => [...prevArray, errorText])\n    }\n  }\n\n  return (\n    <div className={classes.testWrapper}>\n      <a href=\"/test\">To test</a><br />\n      <a href=\"/test2\">To test2</a>\n      <div className={classes.btnWrapper}><span>Current url: {url}</span></div>\n      <div className={classes.btnWrapper}>\n        <input type=\"file\" />\n        <button onClick={() => handleMethod('shareImage', shareParams.jpgOnly)}>shareImage jpg w/o caption</button>\n      </div>\n      <div style={{ marginTop: 20 }} >\n        <b>Errors:</b>\n        {errors.map((errMessage, i) => (\n            <div key={i + errMessage}>{errMessage}</div>\n          ))}\n      </div>\n      <div style={{ marginTop: 20, display: 'flex' }}>\n        <div style={{ width: '30%' }}>\n          <b style={{ marginBottom: 10 }}>Invoked methods:</b>\n          {calledMethods.map((method, i) => {\n            return (\n              <div key={i + method}>{i+1 + ') '}{method}</div>\n            );\n          })}\n        </div>\n        <div style={{ width: '30%' }}>\n          <b style={{ marginBottom: 10 }}>Received data:</b>\n          {receivedData && receivedData.map((data, i) => {\n            return (\n              <div key={i + data}>{i+1 + '. '}{data}</div>\n            )\n          })}\n        </div>\n        <div style={{ width: '30%' }}>\n          <b style={{ marginBottom: 10 }}>Received errors:</b>\n          {receivedError && receivedError.map((error, i) => {\n            return (\n              <div key={i + error}>{i+1 + '. '}{error}</div>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(Test);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AANA;AAiBA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAKA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AACA;AADA;AAKA;AAAA;AAAA;AAEA;AAPA;AAAA;AAAA;AACA;AADA;AASA;AACA;AAAA;AAAA;AAVA;AAAA;AACA;AADA;AAAA;AAAA;AAYA;AACA;AACA;AAAA;AAAA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAisourceRoot":""}