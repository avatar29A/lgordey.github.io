{"version":3,"file":"static/webpack/static/development/pages/test.js.03ac29b23c7b8c8ecdab.hot-update.js","sources":["webpack:///./pages/test.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport withStyles from 'react-jss';\nimport aituBridge from '@btsd/aitu-bridge';\n\nconst eventType = 'aituEvents';\n\nconst styles = {\n  testWrapper: {\n    width: '100%',\n    maxWidth: 800,\n    margin: '0 auto'\n  }\n};\n\nfunction Test({ classes }) {\n  const [calledMethods, setCalledMethods] = useState([]);\n  const [methodName, setMethodName] = useState('');\n  const [receivedData, setReceivedData] = useState([]);\n\n  useEffect(() => {\n    invokeMethod('InitApps');\n\n    window.addEventListener(eventType, (event) => {\n      const evStr = JSON.stringify(event.detail);\n      console.log('eventType', eventType);\n      console.log('event', event);\n      setReceivedData(prevArray => [...prevArray, evStr])\n    });\n  }, []);\n\n  const handleChange = (event) => {\n    setMethodName(event.target.value);\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    invokeMethod(methodName);\n  }\n\n  const invokeMethod = (name) => {\n    aituBridge.invoke(name);\n    setCalledMethods(prevArray => [...prevArray, name])\n    setMethodName('');\n  }\n\n  return (\n    <div className={classes.testWrapper}>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Method name:\n          <input type=\"text\" name=\"method-name\" value={methodName} onChange={handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Invoke method\" />\n      </form>\n      <div style={{ marginTop: 20, display: 'flex' }}>\n        <div style={{ width: '50%' }}>\n          <b style={{ marginBottom: 10 }}>Invoked methods:</b>\n          {calledMethods.map((method, i) => (\n            <div key={i + method}>{i+1 + ') '}{method}</div>\n          ))}\n        </div>\n        <div style={{ width: '50%' }}>\n          <b style={{ marginBottom: 10 }}>Received data:</b>\n          {receivedData && receivedData.map((data, i) => (\n            <div key={i + data}>{i+1 + '. '}{data}</div>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(Test);;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AADA;AACA;AAOA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAOA;AACA;AACA;AAAA;;;;A","sourceRoot":""}